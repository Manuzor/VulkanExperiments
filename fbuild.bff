
// These get included at the right time. They're just listed here for
// convenience.
.SubFiles =
{
  'Data/fbuild.bff'
  'Code/Core/fbuild.bff'
  'Code/Cfg/fbuild.bff'
  'Code/ShaderCompiler/fbuild.bff'
  'Code/Application/fbuild.bff'
  'Tests/fbuild.bff'
}

#include "Workspace/System.bff"

.BuildPath = '$RepoRoot$/Build'
.WorkspacePath = '$RepoRoot$/Workspace'
.RootBff = '$RepoRoot$/fbuild.bff'
.FBuild = '$RepoRoot$/Utilities/FASTBuild/FBuild.exe'

.Compiler = '$VS2015Path$/VC/bin/amd64/cl.exe'
.CompilerOptions = '/c %1 /Fo%2'
                   + ' /nologo'  // Supress compiler info print.
                   + ' /Z7'      // /Z{7|i|I} Debug information. (7 = in obj, i = in pbd)
                   + ' /FC'      // Use full pathnames in diagnostics
                   + ' /Od'      // Disable optimizations
                   + ' /Oi'      // Generate intrinsic functions
                   + ' /WX'      // Treat warnings as errors
                   + ' /W4'      // /W<n> Set warning level (default n=1)
                   + ' /wd4201'  // /wd<n> Disable warning number n.
                   + ' /wd4100'  // /wd<n> Disable warning number n.
                   + ' /wd4189'  // /wd<n> Disable warning number n.
                   + ' /Gm-'     // /Gm[-] Enable minimal rebuild
                   + ' /GR-'     // /GR[-]   Enable runtime type information
                   + ' /EHa-'    // /EHa[-]  Something about exception handling
                   + ' /TP'      // /TP      Compile all as .cpp
                   + ' /MDd'     // /MD[d] /MT[d] Dynamically or statically linked C run-time library (d = debug)
                   + ' /EHsc'    // Enable exception handling.

                   + ' /I$RepoRoot$/Code'

                   //
                   // Defines
                   //
                   + ' /DBB_Platform_Windows'   // For a win32 build.
                   + ' /DBB_Platform_x64'       // For x64 builds.
                   + ' /DBB_Enable_Assert'      // Enable assertions.
                   + ' /DBB_Enable_BoundsCheck' // Enable bounds checking.

                   //
                   // Windows specific defines
                   //
                   + ' /DNOMINMAX'                // Exclude annoying Windows macros.
                   + ' /DWIN32_LEAN_AND_MEAN'     // Strip some rarely used Windows stuff.
                   + ' /D_CRT_SECURE_NO_WARNINGS' // Shut up windows.h's warnings

                   //
                   // System Includes
                   //
                   + ' /I"$VS2015Path$\VC\Include"'
                   + ' /I"$Windows10SDKPath$\Include\$Windows10SDKVersion$\ucrt"'
                   + ' /I"$Windows10SDKPath$\Include\$Windows10SDKVersion$\shared"'
                   + ' /I"$Windows10SDKPath$\Include\$Windows10SDKVersion$\um"'
                   + ' /I"$Windows10SDKPath$\Include\$Windows10SDKVersion$\winrt"'
.CompilerInputFiles = {}

.Linker = '$VS2015Path$/VC/bin/amd64/link.exe'
.LinkerOptions = '%1 /OUT:%2'
                 + ' /DEBUG'          // Tell the linker that we're in debug mode. Required for PDBs to work
                 + ' /nologo'         // Suppress linker info print.
                 + ' /INCREMENTAL:NO' // No incremental linking.
                 + ' /LIBPATH:"$VS2015Path$\VC\lib\amd64"'
                 + ' /LIBPATH:"$Windows10SDKPath$\Lib\$Windows10SDKVersion$\um\x64"'
                 + ' /LIBPATH:"$Windows10SDKPath$\Lib\$Windows10SDKVersion$\ucrt\x64"'
                 + ' user32.lib'
.Libraries = {}


//
// Visual Studio Project Generation
//

.MyVisualStudioFBuildCommand = '"$FBuild$" -ide -config "$RootBff$"'

.Project_Common =
[
  .TheBaseCommand = 'py -3 "$RepoRoot$/Utilities/Build.py" --proxy-bff "$WorkspacePath$/VisualStudio.bff" --'
  .ProjectBuildCommand   = '$TheBaseCommand$ ^$(ProjectName)-^$(Configuration) -ide'
  .ProjectRebuildCommand = '$TheBaseCommand$ ^$(ProjectName)-^$(Configuration) -ide -clean'
  .OutputDirectory       = '$BuildPath$'
  .IntermediateDirectory = '$BuildPath$'
  .Platform              = 'x64'
  .PlatformToolset       = 'v140'
]

.Project_x64_Debug   = [ Using(.Project_Common) .Config = 'x64-Debug' ]
.Project_x64_Release = [ Using(.Project_Common) .Config = 'x64-Release' ]

.ProjectConfigs = { .Project_x64_Debug, .Project_x64_Release }
.ProjectAllowedFileExtensions = { '.cpp', '.hpp', '.ipp', '.h', '.c', '.inl', }
.IncludeSearchPath = '$RepoRoot$/Code;'
.ProjectFiles = { '$RepoRoot$/Utilities/VulkanExperiments.natvis' }


//
// Targets
//

.SolutionProjects = {}

Alias( 'GlslangLibs' )
{
  .MyGlslangBuildPath = '$VulkanSDKPath$/glslang/build'
  .Targets =
  {
    '$MyGlslangBuildPath$/glslang/Debug/glslang.lib'
    '$MyGlslangBuildPath$/glslang/OSDependent/Windows/Debug/OSDependent.lib'
    '$MyGlslangBuildPath$/OGLCompilersDLL/Debug/OGLCompiler.lib'
    '$MyGlslangBuildPath$/hlsl/Debug/HLSL.lib'
    '$MyGlslangBuildPath$/SPIRV/Debug/SPIRV.lib'
  }
}

// Vulkan debug files
{
  .Dest = '$BuildPath$/'
  .MySourceBase = '$VulkanSDKPath$/Source/lib'

  Copy( 'Copy-VulkanLoader-Debug' )
  {
    .Source = { '$MySourceBase$/vulkan-1.dll', '$MySourceBase$/vulkan-1.pdb' }
  }

  CopyDir( 'Copy-VulkanLayers-Debug' )
  {
    .SourcePaths = '$MySourceBase$/'
    .SourcePathsPattern = { 'VkLayer_*' }
  }

  Alias( 'Copy-VulkanFiles-Debug' )
  {
    .Targets = { 'Copy-VulkanLoader-Debug', 'Copy-VulkanLayers-Debug' }
  }
}

ForEach( .File in .SubFiles )
{
  #include "$RepoRoot$/$File$"
}


//
// Aliases
//

Alias( 'all' )
{
  .Targets = { 'Core', 'Application', 'Tests' }
}

//
// Visual Studio Solution
//

VSSolution( 'GenerateVisualStudioSolution' )
{
  .SolutionOutput = '$WorkspacePath$/VisualStudio/VulkanExperiments.sln'
  .SolutionConfigs = .ProjectConfigs
  .SolutionBuildProject = 'Application-Proj'
  .ExtraFiles = { '$RepoRoot$/Utilities/VulkanExperiments.natvis' }
}

Alias( 'vs' )
{
  .Targets = { 'GenerateVisualStudioSolution' }
}

//
// Generate a Sublime Text Project File.
//
Exec( 'GenerateSublimeProject' )
{
  .ThePythonScript = '$RepoRoot$/Utilities/GenerateSublimeProject.py'
  .ExecExecutable = 'C:\Windows\py.exe'
  .ExecArguments = '-3 "$ThePythonScript$"'
  .ExecInput = '$ThePythonScript$'
  .ExecOutput = '$RepoRoot$/VulkanExperiments.sublime-project'
  .ExecWorkingDir = '$RepoRoot$'
  .ExecUseStdOutAsOutput = true
}

Alias( 'subl' )
{
  .Targets = { 'GenerateSublimeProject' }
}
