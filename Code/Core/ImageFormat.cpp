#include "ImageFormat.hpp"

#include "Log.hpp"

struct image_format_meta
{
  image_format      Format;
  char const*       Name;
  uint32            BitsPerPixel;
  uint32            RedMask;
  uint32            GreenMask;
  uint32            BlueMask;
  uint32            AlphaMask;
  image_format_type Type;
};

static fixed_block<NumImageFormats(), image_format_meta> ImageFormatMetaData;
static bool ImageFormatMetaDataMapIsInitialized = false;

static void
InitImageFormatMetaDataMap()
{
  #define DEFINE_FORMAT(Name, BPP, RedMask, GreenMask, BlueMask, AlphaMask, TypeName)\
    ImageFormatMetaData[Cast<size_t>(image_format::Name)] = { image_format::Name, #Name, BPP, RedMask, GreenMask, BlueMask, AlphaMask, image_format_type::TypeName };

  DEFINE_FORMAT(UNKNOWN, 0, 0, 0, 0, 0, UNKNOWN);

  DEFINE_FORMAT(R32G32B32A32_TYPELESS, 128, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32A32_FLOAT, 128, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32A32_UINT, 128, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32A32_SINT, 128, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R32G32B32_TYPELESS, 96, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32_FLOAT, 96, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32_UINT, 96, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32B32_SINT, 96, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R16G16B16A16_TYPELESS, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16B16A16_FLOAT, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16B16A16_UNORM, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16B16A16_UINT, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16B16A16_SNORM, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16B16A16_SINT, 64, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R32G32_TYPELESS, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32_FLOAT, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32_UINT, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32G32_SINT, 64, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R32G8X24_TYPELESS, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(D32_FLOAT_S8X24_UINT, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32_FLOAT_X8X24_TYPELESS, 64, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(X32_TYPELESS_G8X24_UINT, 64, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R10G10B10A2_TYPELESS, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R10G10B10A2_UNORM, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R10G10B10A2_UINT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R10G10B10_XR_BIAS_A2_UNORM, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R11G11B10_FLOAT, 32, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R8G8B8A8_TYPELESS, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);
  DEFINE_FORMAT(R8G8B8A8_UNORM, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);
  DEFINE_FORMAT(R8G8B8A8_UNORM_SRGB, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);
  DEFINE_FORMAT(R8G8B8A8_UINT, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);
  DEFINE_FORMAT(R8G8B8A8_SNORM, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);
  DEFINE_FORMAT(R8G8B8A8_SINT, 32, 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000, LINEAR);

  DEFINE_FORMAT(B8G8R8A8_UNORM, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000, LINEAR);
  DEFINE_FORMAT(B8G8R8X8_UNORM, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000, LINEAR);
  DEFINE_FORMAT(B8G8R8A8_TYPELESS, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000, LINEAR);
  DEFINE_FORMAT(B8G8R8A8_UNORM_SRGB, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000, LINEAR);
  DEFINE_FORMAT(B8G8R8X8_TYPELESS, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0xFF000000, LINEAR);
  DEFINE_FORMAT(B8G8R8X8_UNORM_SRGB, 32, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000, LINEAR);

  DEFINE_FORMAT(R16G16_TYPELESS, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16_FLOAT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16_UNORM, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16_UINT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16_SNORM, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16G16_SINT, 32, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R32_TYPELESS, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(D32_FLOAT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32_FLOAT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32_UINT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R32_SINT, 32, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R24G8_TYPELESS, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(D24_UNORM_S8_UINT, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R24_UNORM_X8_TYPELESS, 32, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(X24_TYPELESS_G8_UINT, 32, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(B8G8R8_UNORM, 24, 0x00FF0000, 0x0000FF00, 0x000000FF, 0x00000000, LINEAR);

  DEFINE_FORMAT(R8G8_TYPELESS, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8G8_UNORM, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8G8_UINT, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8G8_SNORM, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8G8_SINT, 16, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(B5G6R5_UNORM, 16, 0xF800, 0x07E0, 0x001F, 0x0000, LINEAR);
  DEFINE_FORMAT(B5G5R5A1_UNORM, 16, 0x7C00, 0x03E0, 0x001F, 0x8000, LINEAR);
  DEFINE_FORMAT(B5G5R5X1_UNORM, 16, 0x7C00, 0x03E0, 0x001F, 0x0000, LINEAR);

  DEFINE_FORMAT(R16_TYPELESS, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16_FLOAT, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(D16_UNORM, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16_UNORM, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16_UINT, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16_SNORM, 16, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R16_SINT, 16, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R8_TYPELESS, 8, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8_UNORM, 8, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8_UINT, 8, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8_SNORM, 8, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(R8_SINT, 8, 0, 0, 0, 0, LINEAR);
  DEFINE_FORMAT(A8_UNORM, 8, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R1_UNORM, 1, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(R9G9B9E5_SHAREDEXP, 32, 0, 0, 0, 0, LINEAR);

  DEFINE_FORMAT(BC1_TYPELESS, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC1_UNORM, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC1_UNORM_SRGB, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC2_TYPELESS, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC2_UNORM, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC2_UNORM_SRGB, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC3_TYPELESS, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC3_UNORM, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC3_UNORM_SRGB, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC4_TYPELESS, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC4_UNORM, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC4_SNORM, 4, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC5_TYPELESS, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC5_UNORM, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC5_SNORM, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC6H_TYPELESS, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC6H_UF16, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC6H_SF16, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC7_TYPELESS, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC7_UNORM, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);
  DEFINE_FORMAT(BC7_UNORM_SRGB, 8, 0, 0, 0, 0, BLOCK_COMPRESSED);

  DEFINE_FORMAT(B4G4R4A4_UNORM, 16, 0x0F00, 0x00F0, 0x000F, 0xF000, LINEAR);

  #undef DEFINE_FORMAT
}

static image_format_meta*
GetImageFormatMetaData(image_format Format)
{
  if(!ImageFormatMetaDataMapIsInitialized)
  {
    InitImageFormatMetaDataMap();
    ImageFormatMetaDataMapIsInitialized = true;
  }
  auto Data = &ImageFormatMetaData[Cast<size_t>(Format)];
  return Data;
}

char const*
ImageFormatName(image_format Format)
{
  return GetImageFormatMetaData(Format)->Name;
}

uint32
ImageFormatBitsPerPixel(image_format Format)
{
  return GetImageFormatMetaData(Format)->BitsPerPixel;
}

uint32
ImageFormatRedMask(image_format Format)
{
  return GetImageFormatMetaData(Format)->RedMask;
}

uint32
ImageFormatGreenMask(image_format Format)
{
  return GetImageFormatMetaData(Format)->GreenMask;
}

uint32
ImageFormatBlueMask(image_format Format)
{
  return GetImageFormatMetaData(Format)->BlueMask;
}

uint32
ImageFormatAlphaMask(image_format Format)
{
  return GetImageFormatMetaData(Format)->AlphaMask;
}

image_format_type
ImageFormatType(image_format Format)
{
  return GetImageFormatMetaData(Format)->Type;
}

image_format
ImageFormatFromPixelMask(uint32 RedMask, uint32 GreenMask, uint32 BlueMask, uint32 AlphaMask,
                         uint32 BitsPerPixel)
{
  if(!ImageFormatMetaDataMapIsInitialized)
  {
    InitImageFormatMetaDataMap();
    ImageFormatMetaDataMapIsInitialized = true;
  }

  for(auto& Candidate : ImageFormatMetaData)
  {
    if(Candidate.RedMask == RedMask &&
       Candidate.GreenMask == GreenMask &&
       Candidate.BlueMask == BlueMask &&
       Candidate.AlphaMask == AlphaMask)
    {
      if(Candidate.BitsPerPixel == BitsPerPixel)
        return Candidate.Format;
      LogWarning("%s matches the pixel mask but does not match with the requested bits per pixel.", Candidate.Name);
    }
  }

  return image_format::UNKNOWN;
}

enum DXGI_FORMAT
{
  DXGI_FORMAT_UNKNOWN = 0,
  DXGI_FORMAT_R32G32B32A32_TYPELESS = 1,
  DXGI_FORMAT_R32G32B32A32_FLOAT = 2,
  DXGI_FORMAT_R32G32B32A32_UINT = 3,
  DXGI_FORMAT_R32G32B32A32_SINT = 4,
  DXGI_FORMAT_R32G32B32_TYPELESS = 5,
  DXGI_FORMAT_R32G32B32_FLOAT = 6,
  DXGI_FORMAT_R32G32B32_UINT = 7,
  DXGI_FORMAT_R32G32B32_SINT = 8,
  DXGI_FORMAT_R16G16B16A16_TYPELESS = 9,
  DXGI_FORMAT_R16G16B16A16_FLOAT = 10,
  DXGI_FORMAT_R16G16B16A16_UNORM = 11,
  DXGI_FORMAT_R16G16B16A16_UINT = 12,
  DXGI_FORMAT_R16G16B16A16_SNORM = 13,
  DXGI_FORMAT_R16G16B16A16_SINT = 14,
  DXGI_FORMAT_R32G32_TYPELESS = 15,
  DXGI_FORMAT_R32G32_FLOAT = 16,
  DXGI_FORMAT_R32G32_UINT = 17,
  DXGI_FORMAT_R32G32_SINT = 18,
  DXGI_FORMAT_R32G8X24_TYPELESS = 19,
  DXGI_FORMAT_D32_FLOAT_S8X24_UINT = 20,
  DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS = 21,
  DXGI_FORMAT_X32_TYPELESS_G8X24_UINT = 22,
  DXGI_FORMAT_R10G10B10A2_TYPELESS = 23,
  DXGI_FORMAT_R10G10B10A2_UNORM = 24,
  DXGI_FORMAT_R10G10B10A2_UINT = 25,
  DXGI_FORMAT_R11G11B10_FLOAT = 26,
  DXGI_FORMAT_R8G8B8A8_TYPELESS = 27,
  DXGI_FORMAT_R8G8B8A8_UNORM = 28,
  DXGI_FORMAT_R8G8B8A8_UNORM_SRGB = 29,
  DXGI_FORMAT_R8G8B8A8_UINT = 30,
  DXGI_FORMAT_R8G8B8A8_SNORM = 31,
  DXGI_FORMAT_R8G8B8A8_SINT = 32,
  DXGI_FORMAT_R16G16_TYPELESS = 33,
  DXGI_FORMAT_R16G16_FLOAT = 34,
  DXGI_FORMAT_R16G16_UNORM = 35,
  DXGI_FORMAT_R16G16_UINT = 36,
  DXGI_FORMAT_R16G16_SNORM = 37,
  DXGI_FORMAT_R16G16_SINT = 38,
  DXGI_FORMAT_R32_TYPELESS = 39,
  DXGI_FORMAT_D32_FLOAT = 40,
  DXGI_FORMAT_R32_FLOAT = 41,
  DXGI_FORMAT_R32_UINT = 42,
  DXGI_FORMAT_R32_SINT = 43,
  DXGI_FORMAT_R24G8_TYPELESS = 44,
  DXGI_FORMAT_D24_UNORM_S8_UINT = 45,
  DXGI_FORMAT_R24_UNORM_X8_TYPELESS = 46,
  DXGI_FORMAT_X24_TYPELESS_G8_UINT = 47,
  DXGI_FORMAT_R8G8_TYPELESS = 48,
  DXGI_FORMAT_R8G8_UNORM = 49,
  DXGI_FORMAT_R8G8_UINT = 50,
  DXGI_FORMAT_R8G8_SNORM = 51,
  DXGI_FORMAT_R8G8_SINT = 52,
  DXGI_FORMAT_R16_TYPELESS = 53,
  DXGI_FORMAT_R16_FLOAT = 54,
  DXGI_FORMAT_D16_UNORM = 55,
  DXGI_FORMAT_R16_UNORM = 56,
  DXGI_FORMAT_R16_UINT = 57,
  DXGI_FORMAT_R16_SNORM = 58,
  DXGI_FORMAT_R16_SINT = 59,
  DXGI_FORMAT_R8_TYPELESS = 60,
  DXGI_FORMAT_R8_UNORM = 61,
  DXGI_FORMAT_R8_UINT = 62,
  DXGI_FORMAT_R8_SNORM = 63,
  DXGI_FORMAT_R8_SINT = 64,
  DXGI_FORMAT_A8_UNORM = 65,
  DXGI_FORMAT_R1_UNORM = 66,
  DXGI_FORMAT_R9G9B9E5_SHAREDEXP = 67,
  DXGI_FORMAT_R8G8_B8G8_UNORM = 68,
  DXGI_FORMAT_G8R8_G8B8_UNORM = 69,
  DXGI_FORMAT_BC1_TYPELESS = 70,
  DXGI_FORMAT_BC1_UNORM = 71,
  DXGI_FORMAT_BC1_UNORM_SRGB = 72,
  DXGI_FORMAT_BC2_TYPELESS = 73,
  DXGI_FORMAT_BC2_UNORM = 74,
  DXGI_FORMAT_BC2_UNORM_SRGB = 75,
  DXGI_FORMAT_BC3_TYPELESS = 76,
  DXGI_FORMAT_BC3_UNORM = 77,
  DXGI_FORMAT_BC3_UNORM_SRGB = 78,
  DXGI_FORMAT_BC4_TYPELESS = 79,
  DXGI_FORMAT_BC4_UNORM = 80,
  DXGI_FORMAT_BC4_SNORM = 81,
  DXGI_FORMAT_BC5_TYPELESS = 82,
  DXGI_FORMAT_BC5_UNORM = 83,
  DXGI_FORMAT_BC5_SNORM = 84,
  DXGI_FORMAT_B5G6R5_UNORM = 85,
  DXGI_FORMAT_B5G5R5A1_UNORM = 86,
  DXGI_FORMAT_B8G8R8A8_UNORM = 87,
  DXGI_FORMAT_B8G8R8X8_UNORM = 88,
  DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM = 89,
  DXGI_FORMAT_B8G8R8A8_TYPELESS = 90,
  DXGI_FORMAT_B8G8R8A8_UNORM_SRGB = 91,
  DXGI_FORMAT_B8G8R8X8_TYPELESS = 92,
  DXGI_FORMAT_B8G8R8X8_UNORM_SRGB = 93,
  DXGI_FORMAT_BC6H_TYPELESS = 94,
  DXGI_FORMAT_BC6H_UF16 = 95,
  DXGI_FORMAT_BC6H_SF16 = 96,
  DXGI_FORMAT_BC7_TYPELESS = 97,
  DXGI_FORMAT_BC7_UNORM = 98,
  DXGI_FORMAT_BC7_UNORM_SRGB = 99,
  DXGI_FORMAT_AYUV = 100,
  DXGI_FORMAT_Y410 = 101,
  DXGI_FORMAT_Y416 = 102,
  DXGI_FORMAT_NV12 = 103,
  DXGI_FORMAT_P010 = 104,
  DXGI_FORMAT_P016 = 105,
  DXGI_FORMAT_420_OPAQUE = 106,
  DXGI_FORMAT_YUY2 = 107,
  DXGI_FORMAT_Y210 = 108,
  DXGI_FORMAT_Y216 = 109,
  DXGI_FORMAT_NV11 = 110,
  DXGI_FORMAT_AI44 = 111,
  DXGI_FORMAT_IA44 = 112,
  DXGI_FORMAT_P8 = 113,
  DXGI_FORMAT_A8P8 = 114,
  DXGI_FORMAT_B4G4R4A4_UNORM = 115,
  DXGI_FORMAT_FORCE_UINT = 0xffffffffUL
};

auto
::ImageFormatToDxgiFormat(image_format Format)
  -> uint32
{
  // Not Implemented.
  Assert(false);
  return 0;
}

auto
::ImageFormatFromDxgiFormat(uint32 DxgiFormat)
  -> image_format
{
  auto Format = Cast<DXGI_FORMAT>(DxgiFormat);

  // Not Implemented.
  Assert(false);
  return image_format::UNKNOWN;
}

#define MAKE_FOURCC(A, B, C, D) ((A) | ((B) << 8) | ((C) << 16) | ((D) << 24))

auto
::ImageFormatToFourCc(image_format Format)
  -> uint32
{
  switch (Format)
  {
  case image_format::BC1_UNORM: return MAKE_FOURCC('D', 'X', 'T', '1');
  case image_format::BC2_UNORM: return MAKE_FOURCC('D', 'X', 'T', '3');
  case image_format::BC3_UNORM: return MAKE_FOURCC('D', 'X', 'T', '5');
  case image_format::BC4_UNORM: return MAKE_FOURCC('A', 'T', 'I', '1');
  case image_format::BC5_UNORM: return MAKE_FOURCC('A', 'T', 'I', '2');
  default: break;
  }

  return 0;
}

auto
::ImageFormatFromFourCc(uint32 FourCc)
  -> image_format
{
  switch (FourCc)
  {
  case MAKE_FOURCC('D', 'X', 'T', '1'): return image_format::BC1_UNORM;
  case MAKE_FOURCC('D', 'X', 'T', '2'):
  case MAKE_FOURCC('D', 'X', 'T', '3'): return image_format::BC2_UNORM;
  case MAKE_FOURCC('D', 'X', 'T', '4'):
  case MAKE_FOURCC('D', 'X', 'T', '5'): return image_format::BC3_UNORM;
  case MAKE_FOURCC('A', 'T', 'I', '1'): return image_format::BC4_UNORM;
  case MAKE_FOURCC('A', 'T', 'I', '2'): return image_format::BC5_UNORM;
  default: break;
  }

  return image_format::UNKNOWN;
}

#undef MAKE_FOURCC
